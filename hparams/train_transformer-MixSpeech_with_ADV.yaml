# ############################################################################
# Model: E2E ASR with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: AISHELL-1
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 8886
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: results_MixSpeech_ADV/transformer_base_0.5_Clean_MixSpeech-With-ADV 
cer_file: !ref <output_folder>/cer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# pretrain_weights_dir: !PLACEHOLDER # e,g. results/Pretrain_Encoder/save/CKPT+XXXX-XX-XX+XX-XX-XX+XX

# Data files
data_folder: !PLACEHOLDER # e,g./path/to/aishell
# noise/ris dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder> # Change this is needed
skip_prep: False
ckpt_interval_minutes: 10 # save checkpoint every N min
train_data: !ref <output_folder>/train.csv
valid_data: !ref <output_folder>/dev.csv
test_data: !ref <output_folder>/test.csv
lexicon_file: !ref <output_folder>/lexicon.json

# Training parameters
number_of_epochs: 60
batch_size: 12
ctc_weight: 0.3
gradient_accumulation: 8
gradient_clipping: 5.0
loss_reduction: 'batchmean'
sorting: random

# ADV parameters
adv_spec_max: 0.01
adv_spec_min: 0.001
adv_kl_weight: 1.0

# MixSpeech parameters
max_mix_previous_weight: 0.5

# save n best models
keep_nbest_models: 10

# stages related parameters
lr_adam_ratio: 1.0

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: 4

valid_dataloader_opts:
    batch_size: 12
    num_workers: 4

test_dataloader_opts:
    batch_size: 1
    num_workers: 4

####################### Model parameters ###########################
# Transformer
d_model: 256
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: 4234

# Outputs
blank_index: 0
label_smoothing: 0.1
pad_index: 0
bos_index: 1
eos_index: 2
unk_index: 0

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0 # 1.0
valid_search_interval: 10
valid_beam_size: 10
test_beam_size: 10
ctc_weight_decode: 0.40

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (256, 256)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)
    activation: !name:torch.nn.ReLU
    norm: null

Transformer: !new:TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 5120
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    normalize_before: True

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

# env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
#     openrir_folder: !ref <data_folder_rirs>
#     babble_prob: 0.0
#     reverb_prob: 0.0
#     noise_prob: 1.0
#     noise_snr_low: 0
#     noise_snr_high: 15

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
#     env_corrupt: !ref <env_corrupt>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# define optimizers
Adam: !name:torch.optim.Adam
    lr: 0
    betas: (0.9, 0.98)
    eps: 0.000000001

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    using_eos_threshold: False
    length_normalization: True

test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    using_eos_threshold: False
    length_normalization: True

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1
    
softmax: !new:torch.nn.Softmax
    dim: -1

kl_div: !new:torch.nn.KLDivLoss
    reduction: !ref <loss_reduction>

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam_ratio>
    n_warmup_steps: 25000
    model_size: !ref <d_model>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

# SpecAugment: !new:speechbrain.lobes.augment.SpecAugment
#     time_warp: True
#     time_warp_window: 5
#     time_warp_mode: bicubic
#     freq_mask: True
#     n_freq_mask: 2
#     time_mask: True
#     n_time_mask: 2
#     replace_with_zero: False
#     freq_mask_width: 30
#     time_mask_width: 40

# SpeedPerturb:
#     speed_90: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
#         orig_freq: !ref <sample_rate>
#         speeds: [90]
#     speed_110: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
#         orig_freq: !ref <sample_rate>
#         speeds: [110]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# AISHELL-1 has spaces between words in the transcripts,
# which Chinese writing normally does not do.
# If remove_spaces, spaces are removed
# from the transcript before computing CER.
# (e.g., 祝 可爱 的 你 —> 祝可爱的你)
remove_spaces: True
split_tokens: !apply:operator.not_ [!ref <remove_spaces>]

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: !ref <split_tokens>
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#     collect_in: !ref <output_folder>/pretrain_model
#     loadables:
#         model: !ref <model>
#         normalize: !ref <normalize>
#     paths:
#         model: !ref <pretrain_weights_dir>/model.ckpt
#         normalize: !ref <pretrain_weights_dir>/normalizer.ckpt
